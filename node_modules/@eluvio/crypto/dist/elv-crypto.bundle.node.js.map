{"version":3,"sources":["webpack://elv-crypto/webpack/universalModuleDefinition","webpack://elv-crypto/webpack/bootstrap","webpack://elv-crypto/./src/Assets.js","webpack://elv-crypto/./src/ElvCryptoWasm.js","webpack://elv-crypto/./src/PrimaryContext.js","webpack://elv-crypto/./src/ScratchBuffer.js","webpack://elv-crypto/./src/TargetDecryptionContext.js","webpack://elv-crypto/./src/Utils.js","webpack://elv-crypto/./src/index.js","webpack://elv-crypto/external \"crypto\"","webpack://elv-crypto/external \"fs\"","webpack://elv-crypto/external \"path\"","webpack://elv-crypto/external \"through2\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;;AAEe,qEAAM;;;;;;;;;;;;;ACLrB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,UAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAO,CAAC,cAAI;AAC1C,kCAAkC,mBAAO,CAAC,kBAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6BAA6B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACc,4EAAa;;;;;;;;;;;;;;ACvmC5B;AAAA;AAAA;AAAA;AAA8B;AACgB;;AAE/B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iDAAK;AACvB,iBAAiB,iDAAK;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAa;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpEA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAA8B;AACgB;;AAE/B;AACf;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iDAAK;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAa;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;;AAE2B;;AAEZ;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,IAAI;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa,6CAAM;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACkC;AAClB;AAClB;AACgB;;AAEhB;AACgB;;AAE9C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iDAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,kDAAM;AACtB,IAAI,iEAAa;AACjB;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,uBAAuB,QAAQ,iBAAiB;AAC1D;;AAEA;AACA;;AAEA,iBAAiB,iDAAK;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,MAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,uBAAuB,QAAQ,iBAAiB;AAC1D;AACA;AACA;AACA,UAAU,uBAAuB,QAAQ,oBAAoB;AAC7D;AACA;AACA;AACA,UAAU,cAAc,QAAQ,WAAW;AAC3C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,iDAAK;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,MAAM;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,iDAAK;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,MAAM;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB,QAAQ,iBAAiB;AAC/D;AACA;AACA;AACA,iBAAiB,wBAAwB,QAAQ,gBAAgB;AACjE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,iDAAK;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,MAAM;AAC7E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB,QAAQ,iBAAiB;AACnE;AACA;AACA;AACA,iBAAiB,qBAAqB,QAAQ,iBAAiB;AAC/D;AACA;AACA;AACA,8BAA8B,kBAAkB,QAAQ,oBAAoB;AAC5E;;AAEA;AACA;;AAEA,eAAe,0DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa,QAAQ,UAAU;AAChD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,MAAM;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,MAAM;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc,QAAQ,WAAW;AAClD;AACA;AACA;AACA,iBAAiB,4BAA4B,QAAQ,gBAAgB;AACrE;AACA;AACA;AACA,iBAAiB,aAAa,QAAQ,UAAU;AAChD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gEAAgE,MAAM;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B,QAAQ,gBAAgB;AACrE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,KAAK;AAC9D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,MAAM;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B,QAAQ,gBAAgB;AACrE;AACA;AACA;AACA,iBAAiB,4BAA4B,QAAQ,gBAAgB;AACrE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,MAAM;AACzE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB,QAAQ,iBAAiB;AACzE;AACA;AACA;AACA,8BAA8B,kBAAkB,QAAQ,oBAAoB;AAC5E;AACA,eAAe,mEAAuB;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc,QAAQ,WAAW;AAClD;AACA;AACA;AACA,iBAAiB,2BAA2B,QAAQ,gBAAgB;AACpE;AACA;AACA;AACA,iBAAiB,aAAa,QAAQ,UAAU;AAChD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,MAAM;AACrE;AACA;AACA;;AAEA;AACA;AACA,WAAW,+CAAO;AAClB;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,WAAW,+CAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,yDAAa;AACrC;AACA,iBAAiB,+CAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;ACj6BA,mC;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,qC","file":"elv-crypto.bundle.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"elv-crypto\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"elv-crypto\"] = factory();\n\telse\n\t\troot[\"elv-crypto\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","const Assets = {\n  'ElvCrypto.wasm':\n    ''\n}\n\nexport default Assets\n","var ElvCryptoWasm = (function() {\n  var _scriptDir =\n    typeof document !== 'undefined' && document.currentScript\n      ? document.currentScript.src\n      : undefined\n  return function(ElvCryptoWasm) {\n    ElvCryptoWasm = ElvCryptoWasm || {}\n\n    var Module = typeof ElvCryptoWasm !== 'undefined' ? ElvCryptoWasm : {}\n    var moduleOverrides = {}\n    var key\n    for (key in Module) {\n      if (Module.hasOwnProperty(key)) {\n        moduleOverrides[key] = Module[key]\n      }\n    }\n    Module['arguments'] = []\n    Module['thisProgram'] = './this.program'\n    Module['quit'] = function(status, toThrow) {\n      throw toThrow\n    }\n    Module['preRun'] = []\n    Module['postRun'] = []\n    var ENVIRONMENT_IS_WEB = false\n    var ENVIRONMENT_IS_WORKER = false\n    var ENVIRONMENT_IS_NODE = false\n    var ENVIRONMENT_IS_SHELL = false\n    ENVIRONMENT_IS_WEB = typeof window === 'object'\n    ENVIRONMENT_IS_WORKER = typeof importScripts === 'function'\n    ENVIRONMENT_IS_NODE =\n      typeof process === 'object' &&\n      typeof require === 'function' &&\n      !ENVIRONMENT_IS_WEB &&\n      !ENVIRONMENT_IS_WORKER\n    ENVIRONMENT_IS_SHELL =\n      !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER\n    var scriptDirectory = ''\n    function locateFile(path) {\n      if (Module['locateFile']) {\n        return Module['locateFile'](path, scriptDirectory)\n      } else {\n        return scriptDirectory + path\n      }\n    }\n    if (ENVIRONMENT_IS_NODE) {\n      scriptDirectory = __dirname + '/'\n      var nodeFS\n      var nodePath\n      Module['read'] = function shell_read(filename, binary) {\n        var ret\n        if (!nodeFS) nodeFS = require('fs')\n        if (!nodePath) nodePath = require('path')\n        filename = nodePath['normalize'](filename)\n        ret = nodeFS['readFileSync'](filename)\n        return binary ? ret : ret.toString()\n      }\n      Module['readBinary'] = function readBinary(filename) {\n        var ret = Module['read'](filename, true)\n        if (!ret.buffer) {\n          ret = new Uint8Array(ret)\n        }\n        assert(ret.buffer)\n        return ret\n      }\n      if (process['argv'].length > 1) {\n        Module['thisProgram'] = process['argv'][1].replace(/\\\\/g, '/')\n      }\n      Module['arguments'] = process['argv'].slice(2)\n      process['on']('uncaughtException', function(ex) {\n        if (!(ex instanceof ExitStatus)) {\n          throw ex\n        }\n      })\n      process['on']('unhandledRejection', function(reason, p) {\n        process['exit'](1)\n      })\n      Module['quit'] = function(status) {\n        process['exit'](status)\n      }\n      Module['inspect'] = function() {\n        return '[Emscripten Module object]'\n      }\n    } else if (ENVIRONMENT_IS_SHELL) {\n      if (typeof read != 'undefined') {\n        Module['read'] = function shell_read(f) {\n          return read(f)\n        }\n      }\n      Module['readBinary'] = function readBinary(f) {\n        var data\n        if (typeof readbuffer === 'function') {\n          return new Uint8Array(readbuffer(f))\n        }\n        data = read(f, 'binary')\n        assert(typeof data === 'object')\n        return data\n      }\n      if (typeof scriptArgs != 'undefined') {\n        Module['arguments'] = scriptArgs\n      } else if (typeof arguments != 'undefined') {\n        Module['arguments'] = arguments\n      }\n      if (typeof quit === 'function') {\n        Module['quit'] = function(status) {\n          quit(status)\n        }\n      }\n    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n      if (ENVIRONMENT_IS_WEB) {\n        if (document.currentScript) {\n          scriptDirectory = document.currentScript.src\n        }\n      } else {\n        scriptDirectory = self.location.href\n      }\n      if (_scriptDir) {\n        scriptDirectory = _scriptDir\n      }\n      if (scriptDirectory.indexOf('blob:') !== 0) {\n        scriptDirectory = scriptDirectory.substr(\n          0,\n          scriptDirectory.lastIndexOf('/') + 1\n        )\n      } else {\n        scriptDirectory = ''\n      }\n      Module['read'] = function shell_read(url) {\n        var xhr = new XMLHttpRequest()\n        xhr.open('GET', url, false)\n        xhr.send(null)\n        return xhr.responseText\n      }\n      if (ENVIRONMENT_IS_WORKER) {\n        Module['readBinary'] = function readBinary(url) {\n          var xhr = new XMLHttpRequest()\n          xhr.open('GET', url, false)\n          xhr.responseType = 'arraybuffer'\n          xhr.send(null)\n          return new Uint8Array(xhr.response)\n        }\n      }\n      Module['readAsync'] = function readAsync(url, onload, onerror) {\n        var xhr = new XMLHttpRequest()\n        xhr.open('GET', url, true)\n        xhr.responseType = 'arraybuffer'\n        xhr.onload = function xhr_onload() {\n          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {\n            onload(xhr.response)\n            return\n          }\n          onerror()\n        }\n        xhr.onerror = onerror\n        xhr.send(null)\n      }\n      Module['setWindowTitle'] = function(title) {\n        document.title = title\n      }\n    } else {\n    }\n    var out =\n      Module['print'] ||\n      (typeof console !== 'undefined'\n        ? console.log.bind(console)\n        : typeof print !== 'undefined'\n        ? print\n        : null)\n    var err =\n      Module['printErr'] ||\n      (typeof printErr !== 'undefined'\n        ? printErr\n        : (typeof console !== 'undefined' && console.warn.bind(console)) || out)\n    for (key in moduleOverrides) {\n      if (moduleOverrides.hasOwnProperty(key)) {\n        Module[key] = moduleOverrides[key]\n      }\n    }\n    moduleOverrides = undefined\n    var STACK_ALIGN = 16\n    function staticAlloc(size) {\n      var ret = STATICTOP\n      STATICTOP = (STATICTOP + size + 15) & -16\n      return ret\n    }\n    function alignMemory(size, factor) {\n      if (!factor) factor = STACK_ALIGN\n      var ret = (size = Math.ceil(size / factor) * factor)\n      return ret\n    }\n    var asm2wasmImports = {\n      'f64-rem': function(x, y) {\n        return x % y\n      },\n      debugger: function() {\n        debugger\n      }\n    }\n    var functionPointers = new Array(0)\n    var GLOBAL_BASE = 1024\n    var ABORT = false\n    var EXITSTATUS = 0\n    function assert(condition, text) {\n      if (!condition) {\n        abort('Assertion failed: ' + text)\n      }\n    }\n    function getValue(ptr, type, noSafe) {\n      type = type || 'i8'\n      if (type.charAt(type.length - 1) === '*') type = 'i32'\n      switch (type) {\n        case 'i1':\n          return HEAP8[ptr >> 0]\n        case 'i8':\n          return HEAP8[ptr >> 0]\n        case 'i16':\n          return HEAP16[ptr >> 1]\n        case 'i32':\n          return HEAP32[ptr >> 2]\n        case 'i64':\n          return HEAP32[ptr >> 2]\n        case 'float':\n          return HEAPF32[ptr >> 2]\n        case 'double':\n          return HEAPF64[ptr >> 3]\n        default:\n          abort('invalid type for getValue: ' + type)\n      }\n      return null\n    }\n    function Pointer_stringify(ptr, length) {\n      if (length === 0 || !ptr) return ''\n      var hasUtf = 0\n      var t\n      var i = 0\n      while (1) {\n        t = HEAPU8[(ptr + i) >> 0]\n        hasUtf |= t\n        if (t == 0 && !length) break\n        i++\n        if (length && i == length) break\n      }\n      if (!length) length = i\n      var ret = ''\n      if (hasUtf < 128) {\n        var MAX_CHUNK = 1024\n        var curr\n        while (length > 0) {\n          curr = String.fromCharCode.apply(\n            String,\n            HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK))\n          )\n          ret = ret ? ret + curr : curr\n          ptr += MAX_CHUNK\n          length -= MAX_CHUNK\n        }\n        return ret\n      }\n      return UTF8ToString(ptr)\n    }\n    var UTF8Decoder =\n      typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n    function UTF8ArrayToString(u8Array, idx) {\n      var endPtr = idx\n      while (u8Array[endPtr]) ++endPtr\n      if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\n        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr))\n      } else {\n        var u0, u1, u2, u3, u4, u5\n        var str = ''\n        while (1) {\n          u0 = u8Array[idx++]\n          if (!u0) return str\n          if (!(u0 & 128)) {\n            str += String.fromCharCode(u0)\n            continue\n          }\n          u1 = u8Array[idx++] & 63\n          if ((u0 & 224) == 192) {\n            str += String.fromCharCode(((u0 & 31) << 6) | u1)\n            continue\n          }\n          u2 = u8Array[idx++] & 63\n          if ((u0 & 240) == 224) {\n            u0 = ((u0 & 15) << 12) | (u1 << 6) | u2\n          } else {\n            u3 = u8Array[idx++] & 63\n            if ((u0 & 248) == 240) {\n              u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3\n            } else {\n              u4 = u8Array[idx++] & 63\n              if ((u0 & 252) == 248) {\n                u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4\n              } else {\n                u5 = u8Array[idx++] & 63\n                u0 =\n                  ((u0 & 1) << 30) |\n                  (u1 << 24) |\n                  (u2 << 18) |\n                  (u3 << 12) |\n                  (u4 << 6) |\n                  u5\n              }\n            }\n          }\n          if (u0 < 65536) {\n            str += String.fromCharCode(u0)\n          } else {\n            var ch = u0 - 65536\n            str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023))\n          }\n        }\n      }\n    }\n    function UTF8ToString(ptr) {\n      return UTF8ArrayToString(HEAPU8, ptr)\n    }\n    var UTF16Decoder =\n      typeof TextDecoder !== 'undefined'\n        ? new TextDecoder('utf-16le')\n        : undefined\n    var WASM_PAGE_SIZE = 65536\n    var ASMJS_PAGE_SIZE = 16777216\n    var MIN_TOTAL_MEMORY = 16777216\n    function alignUp(x, multiple) {\n      if (x % multiple > 0) {\n        x += multiple - (x % multiple)\n      }\n      return x\n    }\n    var buffer,\n      HEAP8,\n      HEAPU8,\n      HEAP16,\n      HEAPU16,\n      HEAP32,\n      HEAPU32,\n      HEAPF32,\n      HEAPF64\n    function updateGlobalBuffer(buf) {\n      Module['buffer'] = buffer = buf\n    }\n    function updateGlobalBufferViews() {\n      Module['HEAP8'] = HEAP8 = new Int8Array(buffer)\n      Module['HEAP16'] = HEAP16 = new Int16Array(buffer)\n      Module['HEAP32'] = HEAP32 = new Int32Array(buffer)\n      Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer)\n      Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer)\n      Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer)\n      Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer)\n      Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer)\n    }\n    var STATIC_BASE, STATICTOP, staticSealed\n    var STACK_BASE, STACKTOP, STACK_MAX\n    var DYNAMIC_BASE, DYNAMICTOP_PTR\n    STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0\n    staticSealed = false\n    function abortOnCannotGrowMemory() {\n      abort(\n        'Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' +\n          TOTAL_MEMORY +\n          ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 '\n      )\n    }\n    if (!Module['reallocBuffer'])\n      Module['reallocBuffer'] = function(size) {\n        var ret\n        try {\n          var oldHEAP8 = HEAP8\n          ret = new ArrayBuffer(size)\n          var temp = new Int8Array(ret)\n          temp.set(oldHEAP8)\n        } catch (e) {\n          return false\n        }\n        var success = _emscripten_replace_memory(ret)\n        if (!success) return false\n        return ret\n      }\n    function enlargeMemory() {\n      var PAGE_MULTIPLE = Module['usingWasm'] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE\n      var LIMIT = 2147483648 - PAGE_MULTIPLE\n      if (HEAP32[DYNAMICTOP_PTR >> 2] > LIMIT) {\n        return false\n      }\n      var OLD_TOTAL_MEMORY = TOTAL_MEMORY\n      TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY)\n      while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR >> 2]) {\n        if (TOTAL_MEMORY <= 536870912) {\n          TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE)\n        } else {\n          TOTAL_MEMORY = Math.min(\n            alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE),\n            LIMIT\n          )\n        }\n      }\n      var replacement = Module['reallocBuffer'](TOTAL_MEMORY)\n      if (!replacement || replacement.byteLength != TOTAL_MEMORY) {\n        TOTAL_MEMORY = OLD_TOTAL_MEMORY\n        return false\n      }\n      updateGlobalBuffer(replacement)\n      updateGlobalBufferViews()\n      return true\n    }\n    var byteLength\n    try {\n      byteLength = Function.prototype.call.bind(\n        Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get\n      )\n      byteLength(new ArrayBuffer(4))\n    } catch (e) {\n      byteLength = function(buffer) {\n        return buffer.byteLength\n      }\n    }\n    var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880\n    var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216\n    if (TOTAL_MEMORY < TOTAL_STACK)\n      err(\n        'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' +\n          TOTAL_MEMORY +\n          '! (TOTAL_STACK=' +\n          TOTAL_STACK +\n          ')'\n      )\n    if (Module['buffer']) {\n      buffer = Module['buffer']\n    } else {\n      if (\n        typeof WebAssembly === 'object' &&\n        typeof WebAssembly.Memory === 'function'\n      ) {\n        Module['wasmMemory'] = new WebAssembly.Memory({\n          initial: TOTAL_MEMORY / WASM_PAGE_SIZE\n        })\n        buffer = Module['wasmMemory'].buffer\n      } else {\n        buffer = new ArrayBuffer(TOTAL_MEMORY)\n      }\n      Module['buffer'] = buffer\n    }\n    updateGlobalBufferViews()\n    function getTotalMemory() {\n      return TOTAL_MEMORY\n    }\n    function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        var callback = callbacks.shift()\n        if (typeof callback == 'function') {\n          callback()\n          continue\n        }\n        var func = callback.func\n        if (typeof func === 'number') {\n          if (callback.arg === undefined) {\n            Module['dynCall_v'](func)\n          } else {\n            Module['dynCall_vi'](func, callback.arg)\n          }\n        } else {\n          func(callback.arg === undefined ? null : callback.arg)\n        }\n      }\n    }\n    var __ATPRERUN__ = []\n    var __ATINIT__ = []\n    var __ATMAIN__ = []\n    var __ATPOSTRUN__ = []\n    var runtimeInitialized = false\n    function preRun() {\n      if (Module['preRun']) {\n        if (typeof Module['preRun'] == 'function')\n          Module['preRun'] = [Module['preRun']]\n        while (Module['preRun'].length) {\n          addOnPreRun(Module['preRun'].shift())\n        }\n      }\n      callRuntimeCallbacks(__ATPRERUN__)\n    }\n    function ensureInitRuntime() {\n      if (runtimeInitialized) return\n      runtimeInitialized = true\n      callRuntimeCallbacks(__ATINIT__)\n    }\n    function preMain() {\n      callRuntimeCallbacks(__ATMAIN__)\n    }\n    function postRun() {\n      if (Module['postRun']) {\n        if (typeof Module['postRun'] == 'function')\n          Module['postRun'] = [Module['postRun']]\n        while (Module['postRun'].length) {\n          addOnPostRun(Module['postRun'].shift())\n        }\n      }\n      callRuntimeCallbacks(__ATPOSTRUN__)\n    }\n    function addOnPreRun(cb) {\n      __ATPRERUN__.unshift(cb)\n    }\n    function addOnPostRun(cb) {\n      __ATPOSTRUN__.unshift(cb)\n    }\n    function writeArrayToMemory(array, buffer) {\n      HEAP8.set(array, buffer)\n    }\n    var runDependencies = 0\n    var runDependencyWatcher = null\n    var dependenciesFulfilled = null\n    function addRunDependency(id) {\n      runDependencies++\n      if (Module['monitorRunDependencies']) {\n        Module['monitorRunDependencies'](runDependencies)\n      }\n    }\n    function removeRunDependency(id) {\n      runDependencies--\n      if (Module['monitorRunDependencies']) {\n        Module['monitorRunDependencies'](runDependencies)\n      }\n      if (runDependencies == 0) {\n        if (runDependencyWatcher !== null) {\n          clearInterval(runDependencyWatcher)\n          runDependencyWatcher = null\n        }\n        if (dependenciesFulfilled) {\n          var callback = dependenciesFulfilled\n          dependenciesFulfilled = null\n          callback()\n        }\n      }\n    }\n    Module['preloadedImages'] = {}\n    Module['preloadedAudios'] = {}\n    var dataURIPrefix = 'data:application/octet-stream;base64,'\n    function isDataURI(filename) {\n      return String.prototype.startsWith\n        ? filename.startsWith(dataURIPrefix)\n        : filename.indexOf(dataURIPrefix) === 0\n    }\n    function integrateWasmJS() {\n      var wasmTextFile = 'elv-crypto.wast'\n      var wasmBinaryFile = 'elv-crypto.wasm'\n      var asmjsCodeFile = 'elv-crypto.temp.asm.js'\n      if (!isDataURI(wasmTextFile)) {\n        wasmTextFile = locateFile(wasmTextFile)\n      }\n      if (!isDataURI(wasmBinaryFile)) {\n        wasmBinaryFile = locateFile(wasmBinaryFile)\n      }\n      if (!isDataURI(asmjsCodeFile)) {\n        asmjsCodeFile = locateFile(asmjsCodeFile)\n      }\n      var wasmPageSize = 64 * 1024\n      var info = {\n        global: null,\n        env: null,\n        asm2wasm: asm2wasmImports,\n        parent: Module\n      }\n      var exports = null\n      function mergeMemory(newBuffer) {\n        var oldBuffer = Module['buffer']\n        if (newBuffer.byteLength < oldBuffer.byteLength) {\n          err(\n            'the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here'\n          )\n        }\n        var oldView = new Int8Array(oldBuffer)\n        var newView = new Int8Array(newBuffer)\n        newView.set(oldView)\n        updateGlobalBuffer(newBuffer)\n        updateGlobalBufferViews()\n      }\n      function fixImports(imports) {\n        return imports\n      }\n      function getBinary() {\n        try {\n          if (Module['wasmBinary']) {\n            return new Uint8Array(Module['wasmBinary'])\n          }\n          if (Module['readBinary']) {\n            return Module['readBinary'](wasmBinaryFile)\n          } else {\n            throw 'both async and sync fetching of the wasm failed'\n          }\n        } catch (err) {\n          abort(err)\n        }\n      }\n      function getBinaryPromise() {\n        if (\n          !Module['wasmBinary'] &&\n          (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) &&\n          typeof fetch === 'function'\n        ) {\n          return fetch(wasmBinaryFile, { credentials: 'same-origin' })\n            .then(function(response) {\n              if (!response['ok']) {\n                throw \"failed to load wasm binary file at '\" +\n                  wasmBinaryFile +\n                  \"'\"\n              }\n              return response['arrayBuffer']()\n            })\n            .catch(function() {\n              return getBinary()\n            })\n        }\n        return new Promise(function(resolve, reject) {\n          resolve(getBinary())\n        })\n      }\n      function doNativeWasm(global, env, providedBuffer) {\n        if (typeof WebAssembly !== 'object') {\n          err('no native wasm support detected')\n          return false\n        }\n        if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {\n          err('no native wasm Memory in use')\n          return false\n        }\n        env['memory'] = Module['wasmMemory']\n        info['global'] = { NaN: NaN, Infinity: Infinity }\n        info['global.Math'] = Math\n        info['env'] = env\n        function receiveInstance(instance, module) {\n          exports = instance.exports\n          if (exports.memory) mergeMemory(exports.memory)\n          Module['asm'] = exports\n          Module['usingWasm'] = true\n          removeRunDependency('wasm-instantiate')\n        }\n        addRunDependency('wasm-instantiate')\n        if (Module['instantiateWasm']) {\n          try {\n            return Module['instantiateWasm'](info, receiveInstance)\n          } catch (e) {\n            err('Module.instantiateWasm callback failed with error: ' + e)\n            return false\n          }\n        }\n        function receiveInstantiatedSource(output) {\n          receiveInstance(output['instance'], output['module'])\n        }\n        function instantiateArrayBuffer(receiver) {\n          getBinaryPromise()\n            .then(function(binary) {\n              return WebAssembly.instantiate(binary, info)\n            })\n            .then(receiver)\n            .catch(function(reason) {\n              err('failed to asynchronously prepare wasm: ' + reason)\n              abort(reason)\n            })\n        }\n        if (\n          !Module['wasmBinary'] &&\n          typeof WebAssembly.instantiateStreaming === 'function' &&\n          !isDataURI(wasmBinaryFile) &&\n          typeof fetch === 'function'\n        ) {\n          WebAssembly.instantiateStreaming(\n            fetch(wasmBinaryFile, { credentials: 'same-origin' }),\n            info\n          )\n            .then(receiveInstantiatedSource)\n            .catch(function(reason) {\n              err('wasm streaming compile failed: ' + reason)\n              err('falling back to ArrayBuffer instantiation')\n              instantiateArrayBuffer(receiveInstantiatedSource)\n            })\n        } else {\n          instantiateArrayBuffer(receiveInstantiatedSource)\n        }\n        return {}\n      }\n      Module['asmPreload'] = Module['asm']\n      var asmjsReallocBuffer = Module['reallocBuffer']\n      var wasmReallocBuffer = function(size) {\n        var PAGE_MULTIPLE = Module['usingWasm']\n          ? WASM_PAGE_SIZE\n          : ASMJS_PAGE_SIZE\n        size = alignUp(size, PAGE_MULTIPLE)\n        var old = Module['buffer']\n        var oldSize = old.byteLength\n        if (Module['usingWasm']) {\n          try {\n            var result = Module['wasmMemory'].grow(\n              (size - oldSize) / wasmPageSize\n            )\n            if (result !== (-1 | 0)) {\n              return (Module['buffer'] = Module['wasmMemory'].buffer)\n            } else {\n              return null\n            }\n          } catch (e) {\n            return null\n          }\n        }\n      }\n      Module['reallocBuffer'] = function(size) {\n        if (finalMethod === 'asmjs') {\n          return asmjsReallocBuffer(size)\n        } else {\n          return wasmReallocBuffer(size)\n        }\n      }\n      var finalMethod = ''\n      Module['asm'] = function(global, env, providedBuffer) {\n        env = fixImports(env)\n        if (!env['table']) {\n          var TABLE_SIZE = Module['wasmTableSize']\n          if (TABLE_SIZE === undefined) TABLE_SIZE = 1024\n          var MAX_TABLE_SIZE = Module['wasmMaxTableSize']\n          if (\n            typeof WebAssembly === 'object' &&\n            typeof WebAssembly.Table === 'function'\n          ) {\n            if (MAX_TABLE_SIZE !== undefined) {\n              env['table'] = new WebAssembly.Table({\n                initial: TABLE_SIZE,\n                maximum: MAX_TABLE_SIZE,\n                element: 'anyfunc'\n              })\n            } else {\n              env['table'] = new WebAssembly.Table({\n                initial: TABLE_SIZE,\n                element: 'anyfunc'\n              })\n            }\n          } else {\n            env['table'] = new Array(TABLE_SIZE)\n          }\n          Module['wasmTable'] = env['table']\n        }\n        if (!env['memoryBase']) {\n          env['memoryBase'] = Module['STATIC_BASE']\n        }\n        if (!env['tableBase']) {\n          env['tableBase'] = 0\n        }\n        var exports\n        exports = doNativeWasm(global, env, providedBuffer)\n        assert(exports, 'no binaryen method succeeded.')\n        return exports\n      }\n    }\n    integrateWasmJS()\n    STATIC_BASE = GLOBAL_BASE\n    STATICTOP = STATIC_BASE + 10016\n    __ATINIT__.push()\n    var STATIC_BUMP = 10016\n    Module['STATIC_BASE'] = STATIC_BASE\n    Module['STATIC_BUMP'] = STATIC_BUMP\n    STATICTOP += 16\n    var SYSCALLS = {\n      varargs: 0,\n      get: function(varargs) {\n        SYSCALLS.varargs += 4\n        var ret = HEAP32[(SYSCALLS.varargs - 4) >> 2]\n        return ret\n      },\n      getStr: function() {\n        var ret = Pointer_stringify(SYSCALLS.get())\n        return ret\n      },\n      get64: function() {\n        var low = SYSCALLS.get(),\n          high = SYSCALLS.get()\n        if (low >= 0) assert(high === 0)\n        else assert(high === -1)\n        return low\n      },\n      getZero: function() {\n        assert(SYSCALLS.get() === 0)\n      }\n    }\n    function ___syscall140(which, varargs) {\n      SYSCALLS.varargs = varargs\n      try {\n        var stream = SYSCALLS.getStreamFromFD(),\n          offset_high = SYSCALLS.get(),\n          offset_low = SYSCALLS.get(),\n          result = SYSCALLS.get(),\n          whence = SYSCALLS.get()\n        var offset = offset_low\n        FS.llseek(stream, offset, whence)\n        HEAP32[result >> 2] = stream.position\n        if (stream.getdents && offset === 0 && whence === 0)\n          stream.getdents = null\n        return 0\n      } catch (e) {\n        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e)\n        return -e.errno\n      }\n    }\n    function ___syscall146(which, varargs) {\n      SYSCALLS.varargs = varargs\n      try {\n        var stream = SYSCALLS.get(),\n          iov = SYSCALLS.get(),\n          iovcnt = SYSCALLS.get()\n        var ret = 0\n        if (!___syscall146.buffers) {\n          ___syscall146.buffers = [null, [], []]\n          ___syscall146.printChar = function(stream, curr) {\n            var buffer = ___syscall146.buffers[stream]\n            assert(buffer)\n            if (curr === 0 || curr === 10) {\n              ;(stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0))\n              buffer.length = 0\n            } else {\n              buffer.push(curr)\n            }\n          }\n        }\n        for (var i = 0; i < iovcnt; i++) {\n          var ptr = HEAP32[(iov + i * 8) >> 2]\n          var len = HEAP32[(iov + (i * 8 + 4)) >> 2]\n          for (var j = 0; j < len; j++) {\n            ___syscall146.printChar(stream, HEAPU8[ptr + j])\n          }\n          ret += len\n        }\n        return ret\n      } catch (e) {\n        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e)\n        return -e.errno\n      }\n    }\n    function ___syscall6(which, varargs) {\n      SYSCALLS.varargs = varargs\n      try {\n        var stream = SYSCALLS.getStreamFromFD()\n        FS.close(stream)\n        return 0\n      } catch (e) {\n        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e)\n        return -e.errno\n      }\n    }\n    function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.set(HEAPU8.subarray(src, src + num), dest)\n      return dest\n    }\n    function ___setErrNo(value) {\n      if (Module['___errno_location'])\n        HEAP32[Module['___errno_location']() >> 2] = value\n      return value\n    }\n    function _time(ptr) {\n      var ret = (Date.now() / 1e3) | 0\n      if (ptr) {\n        HEAP32[ptr >> 2] = ret\n      }\n      return ret\n    }\n    DYNAMICTOP_PTR = staticAlloc(4)\n    STACK_BASE = STACKTOP = alignMemory(STATICTOP)\n    STACK_MAX = STACK_BASE + TOTAL_STACK\n    DYNAMIC_BASE = alignMemory(STACK_MAX)\n    HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE\n    staticSealed = true\n    Module['wasmTableSize'] = 6\n    Module['wasmMaxTableSize'] = 6\n    Module.asmGlobalArg = {}\n    Module.asmLibraryArg = {\n      abort: abort,\n      enlargeMemory: enlargeMemory,\n      getTotalMemory: getTotalMemory,\n      abortOnCannotGrowMemory: abortOnCannotGrowMemory,\n      ___setErrNo: ___setErrNo,\n      ___syscall140: ___syscall140,\n      ___syscall146: ___syscall146,\n      ___syscall6: ___syscall6,\n      _emscripten_memcpy_big: _emscripten_memcpy_big,\n      _time: _time,\n      DYNAMICTOP_PTR: DYNAMICTOP_PTR,\n      STACKTOP: STACKTOP\n    }\n    var asm = Module['asm'](Module.asmGlobalArg, Module.asmLibraryArg, buffer)\n    Module['asm'] = asm\n    var _CalcEncByteCount = (Module['_CalcEncByteCount'] = function() {\n      return Module['asm']['_CalcEncByteCount'].apply(null, arguments)\n    })\n    var _CalcEncByteCountFromTargetH = (Module[\n      '_CalcEncByteCountFromTargetH'\n    ] = function() {\n      return Module['asm']['_CalcEncByteCountFromTargetH'].apply(\n        null,\n        arguments\n      )\n    })\n    var _CalcEncByteCountH = (Module['_CalcEncByteCountH'] = function() {\n      return Module['asm']['_CalcEncByteCountH'].apply(null, arguments)\n    })\n    var _CalcEncECIESByteCount = (Module[\n      '_CalcEncECIESByteCount'\n    ] = function() {\n      return Module['asm']['_CalcEncECIESByteCount'].apply(null, arguments)\n    })\n    var _CalcTargetByteCountH = (Module['_CalcTargetByteCountH'] = function() {\n      return Module['asm']['_CalcTargetByteCountH'].apply(null, arguments)\n    })\n    var _DecryptAES = (Module['_DecryptAES'] = function() {\n      return Module['asm']['_DecryptAES'].apply(null, arguments)\n    })\n    var _DecryptECIES = (Module['_DecryptECIES'] = function() {\n      return Module['asm']['_DecryptECIES'].apply(null, arguments)\n    })\n    var _DecryptH = (Module['_DecryptH'] = function() {\n      return Module['asm']['_DecryptH'].apply(null, arguments)\n    })\n    var _DecryptPrimary = (Module['_DecryptPrimary'] = function() {\n      return Module['asm']['_DecryptPrimary'].apply(null, arguments)\n    })\n    var _DecryptTarget = (Module['_DecryptTarget'] = function() {\n      return Module['asm']['_DecryptTarget'].apply(null, arguments)\n    })\n    var _EMS_AES_KEY_SIZE_ = (Module['_EMS_AES_KEY_SIZE_'] = function() {\n      return Module['asm']['_EMS_AES_KEY_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_CRYPTO_TYPE_PRIMARY_ = (Module[\n      '_EMS_CRYPTO_TYPE_PRIMARY_'\n    ] = function() {\n      return Module['asm']['_EMS_CRYPTO_TYPE_PRIMARY_'].apply(null, arguments)\n    })\n    var _EMS_CRYPTO_TYPE_TARGET_ = (Module[\n      '_EMS_CRYPTO_TYPE_TARGET_'\n    ] = function() {\n      return Module['asm']['_EMS_CRYPTO_TYPE_TARGET_'].apply(null, arguments)\n    })\n    var _EMS_ECIES_PK_KEY_SIZE_ = (Module[\n      '_EMS_ECIES_PK_KEY_SIZE_'\n    ] = function() {\n      return Module['asm']['_EMS_ECIES_PK_KEY_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_ECIES_SK_KEY_SIZE_ = (Module[\n      '_EMS_ECIES_SK_KEY_SIZE_'\n    ] = function() {\n      return Module['asm']['_EMS_ECIES_SK_KEY_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_IV_SIZE_ = (Module['_EMS_IV_SIZE_'] = function() {\n      return Module['asm']['_EMS_IV_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_PRIMARY_BLOCK_KEY_SIZE_ = (Module[\n      '_EMS_PRIMARY_BLOCK_KEY_SIZE_'\n    ] = function() {\n      return Module['asm']['_EMS_PRIMARY_BLOCK_KEY_SIZE_'].apply(\n        null,\n        arguments\n      )\n    })\n    var _EMS_PRIMARY_PK_KEY_SIZE_ = (Module[\n      '_EMS_PRIMARY_PK_KEY_SIZE_'\n    ] = function() {\n      return Module['asm']['_EMS_PRIMARY_PK_KEY_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_RE_ENCRYPTION_KEY_SIZE_ = (Module[\n      '_EMS_RE_ENCRYPTION_KEY_SIZE_'\n    ] = function() {\n      return Module['asm']['_EMS_RE_ENCRYPTION_KEY_SIZE_'].apply(\n        null,\n        arguments\n      )\n    })\n    var _EMS_SECRET_KEY_SIZE_ = (Module['_EMS_SECRET_KEY_SIZE_'] = function() {\n      return Module['asm']['_EMS_SECRET_KEY_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_SEED_SIZE_ = (Module['_EMS_SEED_SIZE_'] = function() {\n      return Module['asm']['_EMS_SEED_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_TAG_SIZE_ = (Module['_EMS_TAG_SIZE_'] = function() {\n      return Module['asm']['_EMS_TAG_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_TARGET_BLOCK_KEY_SIZE_ = (Module[\n      '_EMS_TARGET_BLOCK_KEY_SIZE_'\n    ] = function() {\n      return Module['asm']['_EMS_TARGET_BLOCK_KEY_SIZE_'].apply(null, arguments)\n    })\n    var _EMS_TARGET_PK_KEY_SIZE_ = (Module[\n      '_EMS_TARGET_PK_KEY_SIZE_'\n    ] = function() {\n      return Module['asm']['_EMS_TARGET_PK_KEY_SIZE_'].apply(null, arguments)\n    })\n    var _EncryptAES = (Module['_EncryptAES'] = function() {\n      return Module['asm']['_EncryptAES'].apply(null, arguments)\n    })\n    var _EncryptECIES = (Module['_EncryptECIES'] = function() {\n      return Module['asm']['_EncryptECIES'].apply(null, arguments)\n    })\n    var _EncryptPrimary = (Module['_EncryptPrimary'] = function() {\n      return Module['asm']['_EncryptPrimary'].apply(null, arguments)\n    })\n    var _EncryptPrimaryH = (Module['_EncryptPrimaryH'] = function() {\n      return Module['asm']['_EncryptPrimaryH'].apply(null, arguments)\n    })\n    var _FreeCryptoContext = (Module['_FreeCryptoContext'] = function() {\n      return Module['asm']['_FreeCryptoContext'].apply(null, arguments)\n    })\n    var _GeneratePrimaryKeys = (Module['_GeneratePrimaryKeys'] = function() {\n      return Module['asm']['_GeneratePrimaryKeys'].apply(null, arguments)\n    })\n    var _GenerateReEncryptionKey = (Module[\n      '_GenerateReEncryptionKey'\n    ] = function() {\n      return Module['asm']['_GenerateReEncryptionKey'].apply(null, arguments)\n    })\n    var _GenerateSymmetricKeys = (Module[\n      '_GenerateSymmetricKeys'\n    ] = function() {\n      return Module['asm']['_GenerateSymmetricKeys'].apply(null, arguments)\n    })\n    var _GenerateTargetKeys = (Module['_GenerateTargetKeys'] = function() {\n      return Module['asm']['_GenerateTargetKeys'].apply(null, arguments)\n    })\n    var _NewCryptoContext = (Module['_NewCryptoContext'] = function() {\n      return Module['asm']['_NewCryptoContext'].apply(null, arguments)\n    })\n    var _ReEncryptBlockKey = (Module['_ReEncryptBlockKey'] = function() {\n      return Module['asm']['_ReEncryptBlockKey'].apply(null, arguments)\n    })\n    var _ReEncryptH = (Module['_ReEncryptH'] = function() {\n      return Module['asm']['_ReEncryptH'].apply(null, arguments)\n    })\n    var ___errno_location = (Module['___errno_location'] = function() {\n      return Module['asm']['___errno_location'].apply(null, arguments)\n    })\n    var _emscripten_replace_memory = (Module[\n      '_emscripten_replace_memory'\n    ] = function() {\n      return Module['asm']['_emscripten_replace_memory'].apply(null, arguments)\n    })\n    var _free = (Module['_free'] = function() {\n      return Module['asm']['_free'].apply(null, arguments)\n    })\n    var _malloc = (Module['_malloc'] = function() {\n      return Module['asm']['_malloc'].apply(null, arguments)\n    })\n    Module['asm'] = asm\n    Module['getValue'] = getValue\n    Module['writeArrayToMemory'] = writeArrayToMemory\n    Module['then'] = function(func) {\n      if (Module['calledRun']) {\n        func(Module)\n      } else {\n        var old = Module['onRuntimeInitialized']\n        Module['onRuntimeInitialized'] = function() {\n          if (old) old()\n          func(Module)\n        }\n      }\n      return Module\n    }\n    function ExitStatus(status) {\n      this.name = 'ExitStatus'\n      this.message = 'Program terminated with exit(' + status + ')'\n      this.status = status\n    }\n    ExitStatus.prototype = new Error()\n    ExitStatus.prototype.constructor = ExitStatus\n    dependenciesFulfilled = function runCaller() {\n      if (!Module['calledRun']) run()\n      if (!Module['calledRun']) dependenciesFulfilled = runCaller\n    }\n    function run(args) {\n      args = args || Module['arguments']\n      if (runDependencies > 0) {\n        return\n      }\n      preRun()\n      if (runDependencies > 0) return\n      if (Module['calledRun']) return\n      function doRun() {\n        if (Module['calledRun']) return\n        Module['calledRun'] = true\n        if (ABORT) return\n        ensureInitRuntime()\n        preMain()\n        if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']()\n        postRun()\n      }\n      if (Module['setStatus']) {\n        Module['setStatus']('Running...')\n        setTimeout(function() {\n          setTimeout(function() {\n            Module['setStatus']('')\n          }, 1)\n          doRun()\n        }, 1)\n      } else {\n        doRun()\n      }\n    }\n    Module['run'] = run\n    function abort(what) {\n      if (Module['onAbort']) {\n        Module['onAbort'](what)\n      }\n      if (what !== undefined) {\n        out(what)\n        err(what)\n        what = JSON.stringify(what)\n      } else {\n        what = ''\n      }\n      ABORT = true\n      EXITSTATUS = 1\n      throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.'\n    }\n    Module['abort'] = abort\n    if (Module['preInit']) {\n      if (typeof Module['preInit'] == 'function')\n        Module['preInit'] = [Module['preInit']]\n      while (Module['preInit'].length > 0) {\n        Module['preInit'].pop()()\n      }\n    }\n    Module['noExitRuntime'] = true\n    run()\n\n    return ElvCryptoWasm\n  }\n})()\nexport default ElvCryptoWasm\n","import Utils from './Utils.js'\nimport ScratchBuffer from './ScratchBuffer.js'\n\nexport default class PrimaryContext {\n  /*\n   * wasm\n   * publicKey [Uint8Array PRIMARY_PK_KEY_SIZE]\n   * secretKey [Uint8Array SECRET_KEY_SIZE] - Optional (needed for DecryptPrimary)\n   * symmetricKey [Uint8Array AES_KEY_SIZE]\n   * iv [Uint8Array IV_SIZE]\n   */\n  constructor(wasm, publicKey, secretKey, symmetricKey, iv) {\n    const u = new Utils(wasm)\n    const seed = Utils.randomBytes(wasm._EMS_SEED_SIZE_())\n    const seedBuf = u.arrayToSmartBuf(seed)\n\n    this.wasm = wasm\n    this.utils = u\n    /*\n     * cryptoContext *NewCryptoContext(const char *seedData, int seedDataLen);\n     */\n    this.context = wasm._NewCryptoContext(seedBuf.ptr, seedBuf.len)\n    this.iv = iv\n    this.nextBlockIV = new Uint8Array(iv)\n    this.pk = publicKey\n    this.pkBuf = u.arrayToBuf(publicKey)\n    this.scratchBuf = new ScratchBuffer(wasm)\n    this.sk = secretKey\n    this.skBuf = u.arrayToBuf(secretKey)\n    this.symKey = symmetricKey\n    this.symKeyBuf = u.arrayToBuf(symmetricKey)\n  }\n\n  clearBuf() {\n    this.scratchBuf.clear()\n  }\n\n  free() {\n    if (!this.context) return\n\n    const w = this.wasm\n\n    w._FreeCryptoContext(this.context)\n    w._free(this.pkBuf.ptr)\n    this.scratchBuf.free()\n    w._free(this.symKeyBuf.ptr)\n\n    this.context = null\n    this.iv = null\n    this.nextBlockIV = null\n    this.pk = null\n    this.pkBuf = null\n    this.scratchBuf = null\n    this.sk = null\n    this.skBuf = null\n    this.symKey = null\n    this.symKeyBuf = null\n\n    this.wasm = null\n    this.utils = null\n  }\n\n  generateNextBlockIV() {\n    for (let i = this.nextBlockIV.length - 1; ; i--) {\n      if (this.nextBlockIV[i]++ !== 255) break\n    }\n    return new Uint8Array(this.nextBlockIV)\n  }\n}\n","export default class ScratchBuffer {\n  constructor(wasm) {\n    this.wasm = wasm\n    this.ptr = null\n    this.len = 0\n  }\n\n  clear() {\n    this.len = 0\n  }\n\n  free() {\n    if (this.ptr !== null) {\n      this.wasm._free(this.ptr)\n      this.len = 0\n      this.ptr = null\n    }\n  }\n\n  resize(len) {\n    if (this.ptr !== null) this.free()\n    this.len = len\n    this.ptr = this.wasm._malloc(len)\n  }\n\n  ensureSize(len) {\n    if (this.ptr === null || this.len < len) {\n      this.resize(len)\n    }\n  }\n}\n","import Utils from './Utils.js'\nimport ScratchBuffer from './ScratchBuffer.js'\n\nexport default class TargetDecryptionContext {\n  /*\n   * wasm\n   * secretKey [Uint8Array SECRET_KEY_SIZE]\n   * symmetricKey [Uint8Array AES_KEY_SIZE]\n   */\n  constructor(wasm, secretKey, symmetricKey) {\n    const u = new Utils(wasm)\n\n    this.wasm = wasm\n    this.utils = u\n    /*\n     * cryptoContext *NewCryptoContext(const char *seedData, int seedDataLen);\n     */\n    this.context = wasm._NewCryptoContext(null, 0)\n    this.scratchBuf = new ScratchBuffer(wasm)\n    this.sk = secretKey\n    this.skBuf = u.arrayToBuf(secretKey)\n    this.symKey = symmetricKey\n    this.symKeyBuf = u.arrayToBuf(symmetricKey)\n  }\n\n  clearBuf() {\n    this.scratchBuf.clear()\n  }\n\n  free() {\n    if (!this.context) return\n\n    const w = this.wasm\n\n    w._FreeCryptoContext(this.context)\n    this.scratchBuf.free()\n    w._free(this.skBuf.ptr)\n    w._free(this.symKeyBuf.ptr)\n\n    this.context = null\n    this.scratchBuf = null\n    this.sk = null\n    this.skBuf = null\n    this.symKey = null\n    this.symKeyBuf = null\n    this.utils = null\n    this.wasm = null\n  }\n}\n","/* global window */\n\nimport crypto from 'crypto'\n\nexport default class Utils {\n  constructor(wasm) {\n    this.wasm = wasm\n  }\n\n  /*\n   * Converts a byte array (Uint8Array) to hex string\n   */\n  static bytesToHex(bytes) {\n    return bytes.reduce(\n      (str, byte) => str + byte.toString(16).padStart(2, '0'),\n      ''\n    )\n  }\n\n  static bytesToBinary(bytes) {\n    return bytes.reduce(\n      (str, byte) => str + byte.toString(2).padStart(8, '0') + ' ',\n      ''\n    )\n  }\n\n  /*\n   * Converts a hex string to a byte array (Uint8Array)\n   */\n  static hexToBytes(hex) {\n    return new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)))\n  }\n\n  static randomBytes(size) {\n    if (typeof window !== 'undefined' && window.crypto !== 'undefined') {\n      let bytes = new Uint8Array(size)\n      window.crypto.getRandomValues(bytes)\n      return bytes\n    } else {\n      return crypto.randomBytes(size) // Buffer is a Uint8Array\n    }\n  }\n\n  /*\n   * Write TypedArray to memory to use in a WASM function call. Caller is\n   * responsible for freeing the pointer.\n   *\n   * Returns {\n   *   ptr: [for WASM],\n   *   len: arr.length\n   * }\n   */\n  arrayToBuf(arr) {\n    const w = this.wasm\n    const buf = {\n      ptr: null,\n      len: 0\n    }\n    if (!arr) return buf\n\n    let typedArr = null\n    if (\n      arr instanceof Uint8Array ||\n      (typeof Buffer !== 'undefined' && arr instanceof Buffer)\n    ) {\n      typedArr = arr\n    } else if (arr instanceof ArrayBuffer) {\n      typedArr = new Uint8Array(arr)\n    } else {\n      throw new Error(`arrayToBuf() failed: Expected Uint8Array, Buffer, or\n        ArrayBuffer`)\n    }\n    buf.len = typedArr.length\n    buf.ptr = w._malloc(typedArr.length)\n    w.writeArrayToMemory(typedArr, buf.ptr)\n    return buf\n  }\n\n  /*\n   * Automatically free the pointer later on the event loop\n   */\n  arrayToSmartBuf(arr) {\n    const w = this.wasm\n    const buf = this.arrayToBuf(arr)\n    if (buf.ptr) {\n      setTimeout(() => {\n        w._free(buf.ptr)\n        buf.len = 0\n        buf.ptr = null\n      }, 0)\n    }\n    return buf\n  }\n\n  /*\n   * Allocate a buffer to be automatically freed later on the event loop\n   */\n  smartMalloc(size) {\n    const w = this.wasm\n    const ptr = w._malloc(size)\n    setTimeout(() => {\n      w._free(ptr)\n    }, 0)\n    return ptr\n  }\n}\n","import Assets from './Assets.js'\nimport TargetDecryptionContext from './TargetDecryptionContext.js'\nimport PrimaryContext from './PrimaryContext.js'\nimport Utils from './Utils.js'\nimport ElvCryptoWasm from './ElvCryptoWasm.js'\n\nimport through from 'through2'\nimport ScratchBuffer from './ScratchBuffer.js'\n\n/*\n * Usage:\n *   new ElvCrypto().init().then((elvc) => {\n *     console.log('Ready to go!');\n *     elvc.doStuff();\n *   });\n *\n * IMPORTANT:\n * - All data - i.e. not parameters like keys but the actual data to\n *   encrypt and decrypt - returned by API functions is only valid for the\n *   currenct cycle of the event loop, for efficiency purposes. Copy any data\n *   you need to persist. Moreover, a context object should not be used\n *   to call API functions again if the data is still needed, because the data\n *   is stored in a temporary buffer in the context.\n * - Both Uint8Array and Node.js Buffer (implements Uint8Array interface),\n *   are supported as data parameters. ArrayBuffer should work as well for\n *   data, but not crypto key parameters, for the time being.\n */\nexport default class ElvCrypto {\n  constructor() {\n    this.initResolve = null\n    this.utils = null\n    this.wasm = null\n  }\n\n  init() {\n    const self = this\n    const onWasmLoad = wasm => {\n      self.wasm = wasm\n      self.utils = new Utils(wasm)\n      self.AES_KEY_SIZE = wasm._EMS_AES_KEY_SIZE_()\n      self.CRYPTO_TYPE_TARGET = wasm._EMS_CRYPTO_TYPE_TARGET_()\n      self.CRYPTO_TYPE_PRIMARY = wasm._EMS_CRYPTO_TYPE_PRIMARY_()\n      self.TARGET_BLOCK_KEY_SIZE = wasm._EMS_TARGET_BLOCK_KEY_SIZE_()\n      self.TARGET_PK_KEY_SIZE = wasm._EMS_TARGET_PK_KEY_SIZE_()\n      self.ECIES_PK_KEY_SIZE = wasm._EMS_ECIES_PK_KEY_SIZE_()\n      self.ECIES_SK_KEY_SIZE = wasm._EMS_ECIES_SK_KEY_SIZE_()\n      self.IV_SIZE = wasm._EMS_IV_SIZE_()\n      self.PRIMARY_BLOCK_KEY_SIZE = wasm._EMS_PRIMARY_BLOCK_KEY_SIZE_()\n      self.PRIMARY_PK_KEY_SIZE = wasm._EMS_PRIMARY_PK_KEY_SIZE_()\n      self.RE_ENCRYPTION_KEY_SIZE = wasm._EMS_RE_ENCRYPTION_KEY_SIZE_()\n      self.SECRET_KEY_SIZE = wasm._EMS_SECRET_KEY_SIZE_()\n      self.SEED_SIZE = wasm._EMS_SEED_SIZE_()\n      self.TAG_SIZE = wasm._EMS_TAG_SIZE_()\n      self.ELV_E_INCOMPLETE_BLOCK = -2\n      if (self.initResolve) self.initResolve(self)\n    }\n\n    const b64 = Assets['ElvCrypto.wasm']\n    ElvCryptoWasm({\n      // Direct the Emscripten bootstrap code to fetch a data URI\n      locateFile(path) {\n        return path.endsWith('.wasm')\n          ? 'data:application/octet-stream;base64,' + b64\n          : path\n      },\n      // For Node.js Emscripten does not fetch so we convert string to buffer\n      readBinary(filename) {\n        return Buffer.from(b64, 'base64')\n      }\n    }).then(onWasmLoad)\n\n    return new Promise(resolve => {\n      if (self.wasm) {\n        resolve(self)\n      } else {\n        self.initResolve = resolve\n      }\n    })\n  }\n\n  calcEncByteCount(clrBytes) {\n    return this.wasm._CalcEncByteCount(clrBytes)\n  }\n\n  calcEncByteCountH(cryptoType, clrBytes) {\n    return this.wasm._CalcEncByteCountH(cryptoType, clrBytes)\n  }\n\n  calcEncByteCountFromTargetH(targetBytes) {\n    return this.wasm._CalcEncByteCountFromTargetH(targetBytes)\n  }\n\n  calcTargetByteCountH(primaryBytes) {\n    return this.wasm._CalcTargetByteCountH(primaryBytes)\n  }\n\n  calcEncECIESByteCount(byteLenIn) {\n    return this.wasm._CalcEncECIESByteCount(byteLenIn)\n  }\n\n  /*\n   * Performs ECIES standard encryption of input data using the provided\n   * public key.\n   *\n   * data [Uint8Array]\n   * publicKey [Uint8Array ECIES_PK_KEY_SIZE] - An uncompressed, byte\n   *   serialized secp256k1 key - the same curve type used by Ethereum.\n   *\n   * Returns the encrypted bytes, the 65 byte encrypted ephemeral key used for\n   *   encryption and also required for decryption, and the 16 byte HMAC tag\n   *   to verify the data integrity when decrypted:\n   *   {\n   *     data: [Uint8Array],\n   *     ephemeralKey: [Uint8Array ECIES_PK_KEY_SIZE],\n   *     tag: [Uint8Array TAG_SIZE]\n   *   }\n   */\n  encryptECIES(data, publicKey) {\n    if (publicKey.length !== this.ECIES_PK_KEY_SIZE) {\n      throw new Error(`encryptECIES() failed: Expected publicKey length\n        ${this.ECIES_PK_KEY_SIZE}, not ${publicKey.length}`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const seed = Utils.randomBytes(this.SEED_SIZE)\n    const dataBuf = u.arrayToSmartBuf(data)\n    const pkBuf = u.arrayToSmartBuf(publicKey)\n    const seedBuf = u.arrayToSmartBuf(seed)\n\n    const outSize = this.calcEncECIESByteCount(dataBuf.len)\n    const out = u.smartMalloc(outSize)\n    const ekOut = u.smartMalloc(this.ECIES_PK_KEY_SIZE)\n    const tagOut = u.smartMalloc(this.TAG_SIZE)\n\n    /*\n     * int EncryptECIES(const char *seedData, int seedDataLen,\n     *                  char *pubKeyBytesIn,\n     *                  char *clearBytesIn, int clrBytesLen,\n     *                  char *encBytesOut, int encBytesLen,\n     *                  char *ephKeyBytesOut,\n     *                  char *tagBytesOut);\n     */\n    const error = w._EncryptECIES(\n      seedBuf.ptr,\n      seedBuf.len,\n      pkBuf.ptr,\n      dataBuf.ptr,\n      dataBuf.len,\n      out,\n      outSize,\n      ekOut,\n      tagOut\n    )\n    if (error !== 0) {\n      throw new Error(`_EncryptECIES failed with error code ${error}`)\n    }\n    return {\n      data: new Uint8Array(w.HEAPU8.buffer, out, outSize),\n      ephemeralKey: new Uint8Array(\n        w.HEAPU8.buffer,\n        ekOut,\n        this.ECIES_PK_KEY_SIZE\n      ).slice(0),\n      tag: new Uint8Array(w.HEAPU8.buffer, tagOut, this.TAG_SIZE).slice(0)\n    }\n  }\n\n  /*\n   * Performs ECIES standard decryption of data encrypted with a secp256k1\n   * public key.\n   *\n   * data [Uint8Array]\n   * secretKey [Uint8Array ECIES_SK_KEY_SIZE] - The private key corresponding\n   *   to the public key used for encryption.\n   * ephemeralKey [Uint8Array ECIES_PK_KEY_SIZE] - Generated by encryption\n   * tag [Uint8Array TAG_SIZE] - Generated by encryption\n   *\n   * Returns the decrypted bytes as an Uint8Array\n   */\n  decryptECIES(data, secretKey, ephemeralKey, tag) {\n    if (secretKey.length !== this.ECIES_SK_KEY_SIZE) {\n      throw new Error(`decryptECIES() failed: Expected secretKey length\n        ${this.ECIES_SK_KEY_SIZE}, not ${secretKey.length}`)\n    }\n    if (ephemeralKey.length !== this.ECIES_PK_KEY_SIZE) {\n      throw new Error(`decryptECIES() failed: Expected ephemeralKey length\n        ${this.ECIES_PK_KEY_SIZE}, not ${ephemeralKey.length}`)\n    }\n    if (tag.length !== this.TAG_SIZE) {\n      throw new Error(`decryptECIES() failed: Expected tag length\n        ${this.TAG_SIZE}, not ${tag.length}`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const dataBuf = u.arrayToSmartBuf(data)\n    const skBuf = u.arrayToSmartBuf(secretKey)\n    const ekBuf = u.arrayToSmartBuf(ephemeralKey)\n    const tagBuf = u.arrayToSmartBuf(tag)\n\n    const outSize = dataBuf.len\n    const out = u.smartMalloc(outSize)\n\n    /*\n     * int DecryptECIES(char *ephKeyBytesIn,\n     *                  char *encBytesIn, int encBytesLen,\n     *                  char *tagBytesIn,\n     *                  char *privKeyBytesIn,\n     *                  char *clrBytesOut, int clrBytesLen);\n     */\n    const size = w._DecryptECIES(\n      ekBuf.ptr,\n      dataBuf.ptr,\n      dataBuf.len,\n      tagBuf.ptr,\n      skBuf.ptr,\n      out,\n      outSize\n    )\n    if (size === -1) throw new Error('_DecryptECIES failed')\n    return new Uint8Array(w.HEAPU8.buffer, out, size)\n  }\n\n  /*\n   * Generates a \"target\" private / public key pair for use in content\n   * re-encryption. Target keys are generally used to receive re-encrypted\n   * data and not for direct encryption.\n   *\n   * Returns a 48 byte private key and uncompressed 193 byte public key that\n   * follows the convention of 0x04 as the first byte:\n   *   {\n   *     secretKey: [Uint8Array SECRET_KEY_SIZE],\n   *     publicKey: [Uint8Array TARGET_PK_KEY_SIZE]\n   *   }\n   */\n  generateTargetKeys() {\n    const w = this.wasm\n    const u = this.utils\n\n    const seed = Utils.randomBytes(this.SEED_SIZE)\n    const seedBuf = u.arrayToSmartBuf(seed)\n    const skOut = u.smartMalloc(this.SECRET_KEY_SIZE)\n    const pkOut = u.smartMalloc(this.TARGET_PK_KEY_SIZE)\n\n    /*\n     * int GenerateTargetKeys(const char *seedData, int seedDataLen,\n     *                        char *skBytesOut,\n     *                        char *pkBytesOut)\n     */\n    const error = w._GenerateTargetKeys(seedBuf.ptr, seedBuf.len, skOut, pkOut)\n    if (error !== 0) {\n      throw new Error(`_GenerateTargetKeys failed with error code ${error}`)\n    }\n    return {\n      secretKey: new Uint8Array(\n        w.HEAPU8.buffer,\n        skOut,\n        this.SECRET_KEY_SIZE\n      ).slice(0),\n      publicKey: new Uint8Array(\n        w.HEAPU8.buffer,\n        pkOut,\n        this.TARGET_PK_KEY_SIZE\n      ).slice(0)\n    }\n  }\n\n  /*\n   * Generates a \"primary\" private / public key pair for use in content\n   * encryption. Primary encryption is generally the encryption performed by the\n   * owner or publisher of the content.\n   *\n   * Returns a 48 byte private key and 97 byte public key that follows the\n   * convention of 0x04 as the first byte:\n   *   {\n   *     secretKey: [Uint8Array SECRET_KEY_SIZE],\n   *     publicKey: [Uint8Array PRIMARY_PK_KEY_SIZE]\n   *   }\n   */\n  generatePrimaryKeys() {\n    const w = this.wasm\n    const u = this.utils\n\n    const seed = Utils.randomBytes(this.SEED_SIZE)\n    const seedBuf = u.arrayToSmartBuf(seed)\n    const skOut = u.smartMalloc(this.SECRET_KEY_SIZE)\n    const pkOut = u.smartMalloc(this.PRIMARY_PK_KEY_SIZE)\n\n    /*\n     * int GeneratePrimaryKeys(const char *seedData, int seedDataLen,\n     *                         char *skBytesOut,\n     *                         char *pkBytesOut)\n     */\n    const error = w._GeneratePrimaryKeys(seedBuf.ptr, seedBuf.len, skOut, pkOut)\n    if (error !== 0) {\n      throw new Error(`_GeneratePrimaryKeys failed with error code ${error}`)\n    }\n    return {\n      secretKey: new Uint8Array(\n        w.HEAPU8.buffer,\n        skOut,\n        this.SECRET_KEY_SIZE\n      ).slice(0),\n      publicKey: new Uint8Array(\n        w.HEAPU8.buffer,\n        pkOut,\n        this.PRIMARY_PK_KEY_SIZE\n      ).slice(0)\n    }\n  }\n\n  /*\n   * Creates a key that can be used to re-encrypt data from 'primary'\n   * encryption to 'target' encryption. It is then in a form where it can be\n   * decrypted with the private target key of the intended recipient.\n   *\n   * primarySK [Uint8Array SECRET_KEY_SIZE]: The primary private key used to\n   *   encrypt the data\n   * targetPK [Uint8Array TARGET_PK_KEY_SIZE]: The target public key of\n   *   the target recipient of the re-encrypted data.\n   *\n   * Returns a 193 key: [Uint8Array RE_ENCRYPTION_KEY_SIZE]\n   */\n  generateReEncryptionKey(primarySK, targetPK) {\n    if (primarySK.length !== this.SECRET_KEY_SIZE) {\n      throw new Error(`generateReEncryptionKey() failed: Expected primarySK\n        length ${this.SECRET_KEY_SIZE}, not ${primarySK.length}`)\n    }\n    if (targetPK.length !== this.TARGET_PK_KEY_SIZE) {\n      throw new Error(`generateReEncryptionKey() failed: Expected targetPK\n        length ${this.TARGET_PK_KEY_SIZE}, not ${targetPK.length}`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const skBuf = u.arrayToSmartBuf(primarySK)\n    const pkBuf = u.arrayToSmartBuf(targetPK)\n    const out = u.smartMalloc(this.RE_ENCRYPTION_KEY_SIZE)\n\n    /*\n     * int GenerateReEncryptionKey(char *skPrimaryBytesIn,\n     *                             char *pkTargetBytesIn,\n     *                             char *reEncKeyBytesOut)\n     */\n    const error = w._GenerateReEncryptionKey(skBuf.ptr, pkBuf.ptr, out)\n    if (error !== 0) {\n      throw new Error(\n        `_GenerateReEncryptionKey failed with error code ${error}`\n      )\n    }\n    return new Uint8Array(\n      w.HEAPU8.buffer,\n      out,\n      this.RE_ENCRYPTION_KEY_SIZE\n    ).slice(0)\n  }\n\n  /*\n   * Generates a symmetric key and an initialization vector (IV) for use\n   * with content encryption.\n   *\n   * Returns a 16 byte key (AES-128) and 12 byte IV:\n   *   {\n   *     key: [Uint8Array AES_KEY_SIZE],\n   *     iv: [Uint8Array IV_SIZE]\n   *   }\n   */\n  generateSymmetricKey() {\n    const w = this.wasm\n    const u = this.utils\n\n    const seed = Utils.randomBytes(this.SEED_SIZE)\n    const seedBuf = u.arrayToSmartBuf(seed)\n    const keyOut = u.smartMalloc(this.AES_KEY_SIZE)\n    const ivOut = u.smartMalloc(this.IV_SIZE)\n\n    /*\n     * int GenerateSymmetricKeys(const char *seedData, int seedDataLen,\n     *                           char *keyBytesOut,\n     *                           char *ivBytesOut)\n     */\n    const error = w._GenerateSymmetricKeys(\n      seedBuf.ptr,\n      seedBuf.len,\n      keyOut,\n      ivOut\n    )\n    if (error !== 0) {\n      throw new Error(`_GenerateSymmetricKeys failed with error code ${error}`)\n    }\n    return {\n      key: new Uint8Array(w.HEAPU8.buffer, keyOut, this.AES_KEY_SIZE).slice(0),\n      iv: new Uint8Array(w.HEAPU8.buffer, ivOut, this.IV_SIZE).slice(0)\n    }\n  }\n\n  /*\n   * Creates a context used for block-based primary encryption through\n   * EncryptPrimary. Free the context when done.\n   *\n   * publicKey [Uint8Array PRIMARY_PK_KEY_SIZE]\n   * secretKey [Uint8Array SECRET_KEY_SIZE] - Optional (needed for DecryptPrimary)\n   * symmetricKey [Uint8Array AES_KEY_SIZE]\n   *\n   * returns PrimaryContext\n   */\n  newPrimaryContext(publicKey, secretKey, symmetricKey) {\n    if (publicKey && publicKey.length !== this.PRIMARY_PK_KEY_SIZE) {\n      throw new Error(`newPrimaryContext() failed: Expected publicKey\n        length ${this.PRIMARY_PK_KEY_SIZE}, not ${publicKey.length}`)\n    }\n    if (secretKey && secretKey.length !== this.SECRET_KEY_SIZE) {\n      throw new Error(`newPrimaryContext() failed: Expected secretKey\n        length ${this.SECRET_KEY_SIZE}, not ${secretKey.length}`)\n    }\n    if (symmetricKey.length !== this.AES_KEY_SIZE) {\n      throw new Error(`newPrimaryContext() failed: Expected\n        symmetricKey length ${this.AES_KEY_SIZE}, not ${symmetricKey.length}`)\n    }\n\n    // Generate a \"base\" IV for this context\n    const tempKey = this.generateSymmetricKey()\n\n    return new PrimaryContext(\n      this.wasm,\n      publicKey,\n      secretKey,\n      symmetricKey,\n      tempKey.iv\n    )\n  }\n\n  /*\n   * Performs one 'block' of primary encryption. Each block has both\n   * performance and data size overhead so a fairly large block size is\n   * intended and recommended. We currently use 1MB as a default clear-text\n   * block size. The initialization vector (IV) must be unique for each block\n   * so the context provides a helper function that can be used to generate a\n   * base IV that can then be incremented to create unique values.\n   *\n   * PrimaryContext\n   * data [Uint8Array]\n   * iv [Uint8Array IV_SIZE (12 bytes)]\n   *\n   * Returns: {\n   *   blockKey [Uint8Array PRIMARY_BLOCK_KEY_SIZE (97 bytes)],\n   *   data [Uint8Array],\n   *   tag [Uint8Array TAG_SIZE (16 bytes)],\n   * }\n   */\n  encryptPrimary(context, data, iv) {\n    if (iv.length !== this.IV_SIZE) {\n      throw new Error(`encryptPrimary() failed: Expected iv\n        length ${this.IV_SIZE}, not ${iv.length}`)\n    }\n    if (context.scratchBuf.len !== 0) {\n      throw new Error(`encryptPrimary() failed: Scratch buffer is not empty`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const ivBuf = u.arrayToSmartBuf(iv)\n    const dataBuf = u.arrayToSmartBuf(data)\n    const outSize = this.calcEncByteCount(dataBuf.len)\n    context.scratchBuf.ensureSize(outSize)\n    const tagOut = u.smartMalloc(this.TAG_SIZE)\n    const blockKeyOut = u.smartMalloc(this.PRIMARY_BLOCK_KEY_SIZE)\n\n    /*\n     * int EncryptPrimary(cryptoContext *cxt,\n     *                    char *pkBytesIn,\n     *                    char *symmKeyBytesIn,\n     *                    char *blockIVBytesIn,\n     *                    char *clearBytesIn, int bytesLenIn,\n     *                    char *encBytesOut, int bytesLenOut,\n     *                    char *tagBytesOut,\n     *                    char *blkKeyBytesOut);\n     */\n    const error = w._EncryptPrimary(\n      context.context,\n      context.pkBuf.ptr,\n      context.symKeyBuf.ptr,\n      ivBuf.ptr,\n      dataBuf.ptr,\n      dataBuf.len,\n      context.scratchBuf.ptr,\n      outSize,\n      tagOut,\n      blockKeyOut\n    )\n    if (error !== 0) {\n      throw new Error(`_EncryptPrimary failed with error code ${error}`)\n    }\n    return {\n      blockKey: new Uint8Array(\n        w.HEAPU8.buffer,\n        blockKeyOut,\n        this.PRIMARY_BLOCK_KEY_SIZE\n      ).slice(0),\n      data: new Uint8Array(w.HEAPU8.buffer, context.scratchBuf.ptr, outSize),\n      tag: new Uint8Array(w.HEAPU8.buffer, tagOut, this.TAG_SIZE).slice(0)\n    }\n  }\n\n  /*\n   * Same as EncryptPrimary except the blockKey and tag are included in the\n   * encrypted data output, and the iv is generated automatically using the\n   * context method generateNextBlockIV.\n   *\n   * PrimaryContext\n   * data [Uint8Array]\n   *\n   * Returns: data [Uint8Array]\n   */\n  encryptPrimaryH(context, data) {\n    if (context.scratchBuf.len !== 0) {\n      throw new Error(`encryptPrimaryH() failed: Scratch buffer is not empty`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const iv = context.generateNextBlockIV()\n    const ivBuf = u.arrayToSmartBuf(iv)\n    const dataBuf = u.arrayToSmartBuf(data)\n    const outSize = this.calcEncByteCountH(\n      this.CRYPTO_TYPE_PRIMARY,\n      dataBuf.len\n    )\n    context.scratchBuf.ensureSize(outSize)\n\n    /*\n     * int EncryptPrimaryH(cryptoContext *cxt,\n     *                     const char *pkBytesIn,\n     *                     const char *symmKeyBytesIn,\n     *                     const char *blockIVBytesIn,\n     *                     const char *clearBytesIn, const size_t bytesLenIn,\n     *                     char *encBytesOut);\n     */\n    const error = w._EncryptPrimaryH(\n      context.context,\n      context.pkBuf.ptr,\n      context.symKeyBuf.ptr,\n      ivBuf.ptr,\n      dataBuf.ptr,\n      dataBuf.len,\n      context.scratchBuf.ptr\n    )\n    if (error !== 0) {\n      throw new Error(`_EncryptPrimaryH failed with error code ${error}`)\n    }\n    return new Uint8Array(w.HEAPU8.buffer, context.scratchBuf.ptr, outSize)\n  }\n\n  /*\n   * PrimaryContext\n   * data [Uint8Array]\n   * tag [Uint8Array TAG_SIZE (16 bytes)]\n   * blockKey [Uint8Array PRIMARY_BLOCK_KEY_SIZE (97 bytes)]\n   * iv [Uint8Array IV_SIZE (12 bytes)]\n   * clearSize - length of decrypted data\n   *\n   * Returns decrypted data [Uint8Array]\n   */\n  decryptPrimary(context, data, tag, blockKey, iv, clearSize) {\n    if (tag.length !== this.TAG_SIZE) {\n      throw new Error(`decryptPrimary() failed: Expected tag\n        length ${this.TAG_SIZE}, not ${tag.length}`)\n    }\n    if (blockKey.length !== this.PRIMARY_BLOCK_KEY_SIZE) {\n      throw new Error(`decryptPrimary() failed: Expected blockKey\n        length ${this.PRIMARY_BLOCK_KEY_SIZE}, not ${blockKey.length}`)\n    }\n    if (iv.length !== this.IV_SIZE) {\n      throw new Error(`decryptPrimary() failed: Expected iv\n        length ${this.IV_SIZE}, not ${iv.length}`)\n    }\n    if (context.scratchBuf.len !== 0) {\n      throw new Error(`decryptPrimary() failed: Scratch buffer is not empty`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const dataBuf = u.arrayToSmartBuf(data)\n    const bkBuf = u.arrayToSmartBuf(blockKey)\n    const ivBuf = u.arrayToSmartBuf(iv)\n    const tagBuf = u.arrayToSmartBuf(tag)\n    context.scratchBuf.ensureSize(clearSize)\n\n    /*\n     * int DecryptPrimary(cryptoContext *cxt,\n     *                    char *skBytesIn,\n     *                    char *blkKeyBytesIn,\n     *                    char *symmKeyBytesIn,\n     *                    char *blockIVBytesIn,\n     *                    char *tagBytesIn,\n     *                    char *encBytesIn, int bytesLenIn,\n     *                    char *clearBytesOut, int bytesLenOut);\n     */\n    const error = w._DecryptPrimary(\n      context.context,\n      context.skBuf.ptr,\n      bkBuf.ptr,\n      context.symKeyBuf.ptr,\n      ivBuf.ptr,\n      tagBuf.ptr,\n      dataBuf.ptr,\n      dataBuf.len,\n      context.scratchBuf.ptr,\n      clearSize\n    )\n\n    if (error !== 0) {\n      throw new Error(`_DecryptPrimary failed with error code ${error}`)\n    }\n    return new Uint8Array(w.HEAPU8.buffer, context.scratchBuf.ptr, clearSize)\n  }\n\n  /*\n   * Re-encrypt the block key and update the header. The encrypted data remains\n   * the same.\n   *\n   * scratch - buffer for efficiency\n   * reEncKey - the re-encryption key\n   * data [Uint8Array]\n   *\n   * Returns [Uint8Array]\n   */\n  reEncryptH(scratch, reEncKey, data) {\n    if (reEncKey.length !== this.RE_ENCRYPTION_KEY_SIZE) {\n      throw new Error(`reEncryptBlockKey() failed: Expected reEncKey\n        length ${this.RE_ENCRYPTION_KEY_SIZE}, not ${reEncKey.length}`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const rekBuf = u.arrayToSmartBuf(reEncKey)\n    const dataBuf = u.arrayToSmartBuf(data)\n    scratch.ensureSize(this.calcTargetByteCountH(dataBuf.len))\n    const targetSizePtr = u.smartMalloc(4)\n\n    /*\n     * int ReEncryptH(const char *reEncKey, const char *encData,\n     *                int encDataLen, char *targetBlock, int *targetBlockLen);\n     */\n    const error = w._ReEncryptH(\n      rekBuf.ptr,\n      dataBuf.ptr,\n      dataBuf.len,\n      scratch.ptr,\n      targetSizePtr\n    )\n    if (error === this.ELV_E_INCOMPLETE_BLOCK) {\n      throw new Error('ELV_E_INCOMPLETE_BLOCK')\n    }\n    if (error !== 0) {\n      throw new Error(`_ReEncryptH failed with error code ${error}`)\n    }\n    const targetSize = w.getValue(targetSizePtr, 'i32')\n    return new Uint8Array(w.HEAPU8.buffer, scratch.ptr, targetSize)\n  }\n\n  /*\n   * Same as decryptPrimary/Target except the blockKey, iv, tag, and\n   * clearSize are already included in the encrypted data input.\n   *\n   * type - CRYPTO_TYPE_TARGET or CRYPTO_TYPE_PRIMARY\n   * PrimaryContext\n   * data [Uint8Array]\n   *\n   * Returns decrypted data [Uint8Array]\n   */\n  decryptH(type, context, data) {\n    if (type !== this.CRYPTO_TYPE_TARGET && type !== this.CRYPTO_TYPE_PRIMARY) {\n      throw new Error(`decryptH() failed: Invalid type ${type}`)\n    }\n    if (context.scratchBuf.len !== 0) {\n      throw new Error(`decryptH() failed: Scratch buffer is not empty`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const dataBuf = u.arrayToSmartBuf(data)\n    context.scratchBuf.ensureSize(dataBuf.len) // decrypted data is always smaller\n    const clearSizePtr = u.smartMalloc(4)\n\n    /*\n     * int DecryptH(int cryptoType, cryptoContext *cxt, const char *sk,\n     *              const char *symKey, const char *encData, int encDataLen,\n     *              char *clearData, int *clearDataLen);\n     */\n    const error = w._DecryptH(\n      type,\n      context.context,\n      context.skBuf.ptr,\n      context.symKeyBuf.ptr,\n      dataBuf.ptr,\n      dataBuf.len,\n      context.scratchBuf.ptr,\n      clearSizePtr\n    )\n    if (error === this.ELV_E_INCOMPLETE_BLOCK) {\n      throw new Error('ELV_E_INCOMPLETE_BLOCK')\n    }\n    if (error !== 0) {\n      throw new Error(`_DecryptH failed with error code ${error}`)\n    }\n    const clearSize = w.getValue(clearSizePtr, 'i32')\n    return new Uint8Array(w.HEAPU8.buffer, context.scratchBuf.ptr, clearSize)\n  }\n\n  /*\n   * Used to re-encrypt a block key using the provided re-encryption key (see\n   * \"GenerateReEncryptionKey\"). The block key is transformed in a way such\n   * that it can be used by the holder of the target private key to decrypt\n   * the encrypted data in a block. The encrypted data itself is not\n   * transformed so the process of re-encryption is very efficient since the\n   * bulk of the data is not manipulated.\n   *\n   * reEncKey [Uint8Array RE_ENCRYPTION_KEY_SIZE]\n   * blockKey [Uint8Array PRIMARY_BLOCK_KEY_SIZE]\n   *\n   * Returns the target block key: [Uint8Array TARGET_BLOCK_KEY_SIZE]\n   */\n  reEncryptBlockKey(reEncKey, blockKey) {\n    if (reEncKey.length !== this.RE_ENCRYPTION_KEY_SIZE) {\n      throw new Error(`reEncryptBlockKey() failed: Expected reEncKey\n        length ${this.RE_ENCRYPTION_KEY_SIZE}, not ${reEncKey.length}`)\n    }\n    if (blockKey.length !== this.PRIMARY_BLOCK_KEY_SIZE) {\n      throw new Error(`reEncryptBlockKey() failed: Expected blockKey\n        length ${this.PRIMARY_BLOCK_KEY_SIZE}, not ${blockKey.length}`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const rekBuf = u.arrayToSmartBuf(reEncKey)\n    const bkBuf = u.arrayToSmartBuf(blockKey)\n    const out = u.smartMalloc(this.TARGET_BLOCK_KEY_SIZE)\n\n    /*\n     * int ReEncryptBlockKey(char *reEncKeyBytesIn,\n     *                       char *blkKeyBytesIn,\n     *                       char *tgtBlkKeyBytesOut);\n     */\n    const error = w._ReEncryptBlockKey(rekBuf.ptr, bkBuf.ptr, out)\n    if (error !== 0) {\n      throw new Error(`_ReEncryptBlockKey failed with error code ${error}`)\n    }\n\n    return new Uint8Array(\n      w.HEAPU8.buffer,\n      out,\n      this.TARGET_BLOCK_KEY_SIZE\n    ).slice(0)\n  }\n\n  /*\n   * Creates a context used for block-based target decryption through\n   * DecryptTarget. Free the context when done.\n   *\n   * secretKey [Uint8Array SECRET_KEY_SIZE]\n   * symmetricKey [Uint8Array AES_KEY_SIZE]\n   *\n   * returns TargetDecryptionContext\n   */\n  newTargetDecryptionContext(secretKey, symmetricKey) {\n    if (secretKey.length !== this.SECRET_KEY_SIZE) {\n      throw new Error(`newTargetDecryptionContext() failed: Expected\n        secretKey length ${this.SECRET_KEY_SIZE}, not ${secretKey.length}`)\n    }\n    if (symmetricKey.length !== this.AES_KEY_SIZE) {\n      throw new Error(`newTargetDecryptionContext() failed: Expected\n        symmetricKey length ${this.AES_KEY_SIZE}, not ${symmetricKey.length}`)\n    }\n    return new TargetDecryptionContext(this.wasm, secretKey, symmetricKey)\n  }\n\n  /*\n   * Decrypt data that has been re-encrypted for a target target public key.\n   * The initialization vector, tag and encrypted bytes from the original\n   * encryption must be provided. The re-encrypted block key that corresponds\n   * to the target target key must also be provided. It is assumed that all\n   * of this data is stored together as a block since all of the data is\n   * necessary and secure.\n   *\n   * TargetDecryptionContext\n   * data [Uint8Array]\n   * blockKey [Uint8Array TARGET_BLOCK_KEY_SIZE (576 bytes)]\n   * iv [Uint8Array IV_SIZE (12 bytes)]\n   * tag [Uint8Array TAG_SIZE (16 bytes)]\n   * clearSize - length of decrypted data\n   *\n   * Returns decrypted data [Uint8Array]\n   */\n  decryptTarget(context, data, tag, blockKey, iv, clearSize) {\n    if (tag.length !== this.TAG_SIZE) {\n      throw new Error(`decryptTarget() failed: Expected tag\n        length ${this.TAG_SIZE}, not ${tag.length}`)\n    }\n    if (blockKey.length !== this.TARGET_BLOCK_KEY_SIZE) {\n      throw new Error(`decryptTarget() failed: Expected blockKey\n        length ${this.TARGET_BLOCK_KEY_SIZE}, not ${blockKey.length}`)\n    }\n    if (iv.length !== this.IV_SIZE) {\n      throw new Error(`decryptTarget() failed: Expected iv\n        length ${this.IV_SIZE}, not ${iv.length}`)\n    }\n    if (context.scratchBuf.len !== 0) {\n      throw new Error(`decryptTarget() failed: Scratch buffer is not empty`)\n    }\n\n    const w = this.wasm\n    const u = this.utils\n\n    const dataBuf = u.arrayToSmartBuf(data)\n    const bkBuf = u.arrayToSmartBuf(blockKey)\n    const ivBuf = u.arrayToSmartBuf(iv)\n    const tagBuf = u.arrayToSmartBuf(tag)\n    context.scratchBuf.ensureSize(clearSize)\n\n    /*\n     * int DecryptTarget(cryptoContext *cxt,\n     *                     char *skTgtBytesIn,\n     *                     char *tgtBlkKeyBytesIn,\n     *                     char *symmKeyBytesIn,\n     *                     char *blockIVBytesIn,\n     *                     char *tagBytesIn,\n     *                     char *encBytesIn, int bytesLenIn,\n     *                     char *clearBytesOut, int bytesLenOut);\n     */\n    const error = w._DecryptTarget(\n      context.context,\n      context.skBuf.ptr,\n      bkBuf.ptr,\n      context.symKeyBuf.ptr,\n      ivBuf.ptr,\n      tagBuf.ptr,\n      dataBuf.ptr,\n      dataBuf.len,\n      context.scratchBuf.ptr,\n      clearSize\n    )\n    if (error !== 0) {\n      throw new Error(`_DecryptTarget failed with error code ${error}`)\n    }\n    return new Uint8Array(w.HEAPU8.buffer, context.scratchBuf.ptr, clearSize)\n  }\n\n  createCipher(context) {\n    const elvc = this\n    return through(function(chunk, encoding, callback) {\n      this.push(elvc.encryptPrimaryH(context, chunk))\n      context.clearBuf()\n      callback()\n    })\n  }\n\n  createDecipher(type, context) {\n    const elvc = this\n    let buf = Buffer.alloc(0)\n    return through(function(chunk, encoding, callback) {\n      let index = 0\n      buf = Buffer.concat([buf, chunk])\n      while (index < buf.length) {\n        try {\n          context.clearBuf()\n          let block = elvc.decryptH(type, context, buf.slice(index))\n          this.push(block)\n          index += elvc.calcEncByteCountH(type, block.length)\n        } catch (e) {\n          if (e.message === 'ELV_E_INCOMPLETE_BLOCK') {\n            buf = buf.slice(index)\n            callback()\n            return\n          } else {\n            buf = Buffer.alloc(0)\n            callback(e)\n            return\n          }\n        }\n      }\n      buf = Buffer.alloc(0)\n      callback()\n    })\n  }\n\n  createRecipher(reEncKey) {\n    const elvc = this\n    const scratch = new ScratchBuffer(elvc.wasm)\n    let buf = Buffer.alloc(0)\n    let stream = through(function(chunk, encoding, callback) {\n      let index = 0\n      buf = Buffer.concat([buf, chunk])\n      while (index < buf.length) {\n        try {\n          scratch.clear()\n          let block = elvc.reEncryptH(scratch, reEncKey, buf.slice(index))\n          this.push(block)\n          index += elvc.calcEncByteCountFromTargetH(block.length)\n        } catch (e) {\n          if (e.message === 'ELV_E_INCOMPLETE_BLOCK') {\n            buf = buf.slice(index)\n            callback()\n            return\n          } else {\n            buf = Buffer.alloc(0)\n            callback(e)\n            return\n          }\n        }\n      }\n      buf = Buffer.alloc(0)\n      callback()\n    })\n    stream.on('finish', () => {\n      scratch.free()\n    })\n    return stream\n  }\n}\n","module.exports = require(\"crypto\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"through2\");"],"sourceRoot":""}