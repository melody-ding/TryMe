const fs = require('fs')
const ElvCrypto = require('../dist/elv-crypto.bundle.node').default

const kPrimSk = hexToBytes(
  '000000000000000000000000000000000b9a85e10e7b6f7ba0995c082d3bb8cf962ad5d3eb44ffc7ef037798325c0e7b'
)
const kSym = hexToBytes('37d79b30b2a8e801864b023e330c4b02')

const elvc = new ElvCrypto()
const inFilePath = process.argv[2]
const outFilePath = process.argv[3]

elvc.init().then(() => {
  const context = elvc.newPrimaryContext(null, kPrimSk, kSym)
  const decipher = elvc.createDecipher(elvc.CRYPTO_TYPE_PRIMARY, context)
  const input = fs.createReadStream(inFilePath)
  const output = fs.createWriteStream(outFilePath)
  decipher.on('data', chunk => {
    console.log(`Decrypted block of ${chunk.length} bytes`)
  })
  input.pipe(decipher).pipe(output)
})

function hexToBytes(hex) {
  return new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)))
}
