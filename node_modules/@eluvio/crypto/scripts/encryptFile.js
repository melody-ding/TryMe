const fs = require('fs')
const ElvCrypto = require('../dist/elv-crypto.bundle.node').default

const kPrimPk = hexToBytes(
  '04168f6e4e3369a9ff68226990c8e08f8af3c2fd2c325ae1f002456864b394d89b541fea9f8d773ea454f8e72653447c86163256e3928acdc579b85d6195df2e7b23097bb28b8069a652f4390cb0bda74a0aa7d057a05d8abb524ade09a8db83f7'
)
const kSym = hexToBytes('37d79b30b2a8e801864b023e330c4b02')

const elvc = new ElvCrypto()
const filePath = process.argv[2]

elvc.init().then(() => {
  const context = elvc.newPrimaryContext(kPrimPk, null, kSym)
  const cipher = elvc.createCipher(context)
  const input = fs.createReadStream(filePath, { highWaterMark: 100 })
  const output = fs.createWriteStream(filePath + '.enc')

  cipher.on('data', chunk => {
    console.log(`Writing encrypted block of ${chunk.length} bytes`)
  })
  input.pipe(cipher).pipe(output)
})

function hexToBytes(hex) {
  return new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)))
}
